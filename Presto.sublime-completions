{
        "scope" : "source.presto",

        "completions" :
        [
                { "trigger" : "round(double)",       "contents": "round(${1:double})" },
                { "trigger" : "round(double, int)",  "contents": "round(${1:double}, ${2:int})" },
                { "trigger" : "bround(double)",      "contents": "bround(${1:double})" },
                { "trigger" : "bround(double, int)", "contents": "bround(${1:double}, ${2:int})" },
                { "trigger" : "floor",               "contents": "floor(${1:double})" },
                { "trigger" : "ceil",                "contents": "ceil(${1:double})" },
                { "trigger" : "ceiling",             "contents": "ceiling(${1:double})" },
                { "trigger" : "rand()",              "contents": "rand()" },
                { "trigger" : "rand(seed))",         "contents": "rand(${1:double})" },
                { "trigger" : "exp",                 "contents": "exp(${1:double})" },
                { "trigger" : "ln",                  "contents": "ln(${1:double})" },
                { "trigger" : "log10",               "contents": "log10(${1:double})" },
                { "trigger" : "log2",                "contents": "log2(${1:double})" },
                { "trigger" : "log",                 "contents": "log(${1:base}, ${2:double})" },
                { "trigger" : "pow",                 "contents": "pow(${1:double}, ${2:power})" },
                { "trigger" : "power",               "contents": "power(${1:double})" },
                { "trigger" : "sqrt",                "contents": "sqrt(${1:double})" },
                { "trigger" : "bin",                 "contents": "bin(${1:bigint})" },
                { "trigger" : "hex",                 "contents": "hex(${1:value})" },
                { "trigger" : "unhex",               "contents": "unhex(${1:string})" },
                { "trigger" : "conv",                "contents": "conv(${1:num}, ${2:from_base}, ${3:to_base})" },
                { "trigger" : "abs",                 "contents": "abs(${1:double})" },
                { "trigger" : "pmod",                "contents": "pmod(${1:a}, ${2:b})" },
                { "trigger" : "sin",                 "contents": "sin(${1:double})" },
                { "trigger" : "asin",                "contents": "asin(${1:double})" },
                { "trigger" : "cos",                 "contents": "cos(${1:double})" },
                { "trigger" : "acos",                "contents": "acos(${1:double})" },
                { "trigger" : "tan",                 "contents": "tan(${1:double})" },
                { "trigger" : "atan",                "contents": "atan(${1:double})" },
                { "trigger" : "degrees",             "contents": "degrees(${1:double})" },
                { "trigger" : "radians",             "contents": "radians(${1:double})" },
                { "trigger" : "positive",            "contents": "positive(${1:value})" },
                { "trigger" : "negative",            "contents": "negative(${1:double})" },
                { "trigger" : "sign",                "contents": "sign(${1:double})" },
                { "trigger" : "pi",                  "contents": "pi()" },
                { "trigger" : "e",                   "contents": "e()" },
                { "trigger" : "factorial",           "contents": "factorial(${1:int})" },
                { "trigger" : "cbrt",                "contents": "cbrt(${1:double})" },
                { "trigger" : "shiftleft",           "contents": "shiftleft(${1:int}, ${2:position})" },
                { "trigger" : "shiftright",          "contents": "shiftright(${1:int}, ${2:position})" },
                { "trigger" : "shiftrightunsigned",  "contents": "shiftrightunsigned(${1:int}, ${2:position})" },

                { "trigger" : "decimal(precision, scale)", "contents": "decimal(${1:precision}, ${2:scale})"},
                { "trigger" : "char(length)",              "contents": "char(${1:length})"},

                { "trigger" : "size", "contents": "size(${1:value})" },
                { "trigger" : "map_keys", "contents": "map_keys(${1:map})" },
                { "trigger" : "map_values", "contents": "map_values(${1:map})" },
                { "trigger" : "array_contains", "contents": "array_contains(${1:array}, ${2:value})" },
                { "trigger" : "sort_array", "contents": "sort_array(${1:array})" },

                { "trigger" : "binary", "contents": "binary(${1:value})" },
                { "trigger" : "cast", "contents": "cast(${1:value} as ${2:type})" },

                { "trigger" : "from_unixtime",                              "contents": "from_unixtime(${1:unixtime}[,${2:format}])" },
                { "trigger" : "unix_timestamp",                             "contents": "unix_timestamp()" },
                { "trigger" : "unix_timestamp(string date)",                "contents": "unix_timestamp(${1:date})" },
                { "trigger" : "unix_timestamp(string date, string patten)", "contents": "unix_timestamp(${1:date}, ${2:pattern})" },
                { "trigger" : "to_date",                                    "contents": "to_date(${1:date})" },
                { "trigger" : "year",                                       "contents": "year(${1:date})" },
                { "trigger" : "quarter",                                    "contents": "quarter(${1:date})" },
                { "trigger" : "month",                                      "contents": "month(${1:date})" },
                { "trigger" : "day",                                        "contents": "day(${1:date})" },
                { "trigger" : "dayofmonth",                                 "contents": "dayofmonth(${1:date})" },
                { "trigger" : "hour",                                       "contents": "hour(${1:date})" },
                { "trigger" : "minute",                                     "contents": "minute(${1:date})" },
                { "trigger" : "second",                                     "contents": "second(${1:date})" },
                { "trigger" : "weekofyear",                                 "contents": "weekofyear(${1:date})" },
                { "trigger" : "datediff",                                   "contents": "datediff(${1:enddate}, ${2:startdate})" },
                { "trigger" : "date_add",                                   "contents": "date_add(${1:startdate}, ${2:days})" },
                { "trigger" : "date_sub",                                   "contents": "date_sub(${1:startdate}, ${2:days})" },
                { "trigger" : "from_utc_timestamp",                         "contents": "from_utc_timestamp(${1:timestamp}, ${2:timezone})" },
                { "trigger" : "to_utc_timestamp",                           "contents": "to_utc_timestamp(${1:timestamp}, ${2:timezone})" },
                "current_date",
                "current_timestamp",
                { "trigger" : "add_months",                                 "contents": "add_months(${1:startdate}, ${2:nummonths})" },
                { "trigger" : "last_day",                                   "contents": "last_day(${1:date})" },
                { "trigger" : "next_day",                                   "contents": "next_day(${1:startdate}, ${2:dayofweek})" },
                { "trigger" : "trunc",                                      "contents": "trunc(${1:date}, ${2:format})" },
                { "trigger" : "months_between",                             "contents": "months_between(${1:date}, ${2:date})" },
                { "trigger" : "date_format",                                "contents": "date_format(${1:date}, ${2:format})" },

                { "trigger" : "if(test, value_true, value_false_null)", "contents": "if(${1:test}, ${2:valueTrue}, ${3:valueFalseNull})" },
                { "trigger" : "isnull",                                 "contents": "isnull(${1:value})" },
                { "trigger" : "isnotnull",                              "contents": "isnotnull(${1:value})" },
                { "trigger" : "nvl",                                    "contents": "nvl(${1:value}, ${2:default})" },
                { "trigger" : "coalesce",                               "contents": "COALESCE(${1:v1}, ${2:v2}[, ...])" },
                { "trigger" : "case a when",                            "contents": "CASE ${1:a} WHEN ${2:b} THEN ${3:c} ELSE ${3:d} END" },
                { "trigger" : "case when",                              "contents": "CASE WHEN ${1:a} THEN ${2:b} ELSE ${3:c} END" },
                { "trigger" : "greatest",                               "contents": "greatest(${1:v1}, ${2:v2})"},
                { "trigger" : "least",                                  "contents": "least(${1:v1}, ${2:v2})"},
                { "trigger" : "nullif",                                 "contents": "nullif(${1:a}, ${2:b}"},

                { "trigger" : "ascii", "contents": "ascii(${1:string})" },
                { "trigger" : "base64", "contents": "base64(${1:binary})" },
                { "trigger" : "chr", "contents": "chr(${1:bigint_or_double})" },
                { "trigger" : "concat", "contents": "concat(${1:v1}, ${2:v2})" },
                { "trigger" : "context_ngrams", "contents": "context_ngrams(${1:array}, ${2:array}, ${3:K}, ${4:pg})" },
                { "trigger" : "concat_ws", "contents": "concat_ws(${1:sep}, ${2:v1}, ${2:v2})" },
                { "trigger" : "decode", "contents": "decode(${1:binary}, ${2:charset})" },
                { "trigger" : "encode", "contents": "encode(${1:string}, ${2:charset})" },
                { "trigger" : "find_in_set", "contents": "find_in_set(${1:string}, ${2:stringlist})" },
                { "trigger" : "format_number", "contents": "format_number(${1:x}, ${2:d})" },
                { "trigger" : "get_json_object", "contents": "get_json_object(${1:json}, ${2:path})" },
                { "trigger" : "in_file", "contents": "in_file(${1:string}, ${2:filename})" },
                { "trigger" : "instr", "contents": "instr(${1:string}, ${2:substring})" },
                { "trigger" : "length", "contents": "length(${1:string})" },
                { "trigger" : "locate", "contents": "locate(${1:substring}, ${2:string} [,${3:position}])" },
                { "trigger" : "lower", "contents": "lower(${1:string})" },
                { "trigger" : "lcase", "contents": "lcase(${1:string})" },
                { "trigger" : "lpad", "contents": "lpad(${1:string}, ${2:len}, ${3:pad})" },
                { "trigger" : "ltrim", "contents": "ltrim(${1:string})" },
                { "trigger" : "ngrams", "contents": "ngrams(${1:array}, ${2:N}, ${3:K}, ${4:pf})" },
                { "trigger" : "parse_url", "contents": "parse_url(${1:url}, ${2:part}[, ${3:key}])" },
                { "trigger" : "printf", "contents": "printf(${1:format}, ${2:obj} ...)" },
                { "trigger" : "regexp_extract", "contents": "regexp_extract(${1:subject}, ${2:pattern}, ${3:index})" },
                { "trigger" : "regexp_replace", "contents": "regexp_replace(${1:string}, ${2:pattern}, ${3:replacement})" },
                { "trigger" : "repeat", "contents": "repeat(${1:string}, ${2:n})" },
                { "trigger" : "reverse", "contents": "reverse(${1:string})" },
                { "trigger" : "rpad", "contents": "rpad(${1:string}, ${2:len}, ${3:pad})" },
                { "trigger" : "rtrim", "contents": "rtrim(${1:string})" },
                { "trigger" : "sentences", "contents": "sentences(${1:string}, ${2:lang}, ${3:locale})" },
                { "trigger" : "space", "contents": "space(${1:n})" },
                { "trigger" : "split", "contents": "split(${1:string}, ${2:pattern})" },
                { "trigger" : "str_to_map", "contents": "str_to_map(${1:text})" },
                { "trigger" : "substr", "contents": "substr(${1:string}, ${2:start})" },
                { "trigger" : "substring", "contents": "substring(${1:string}, ${2:start}, ${3:len})" },
                { "trigger" : "substring_index", "contents": "substring(${1:string}, ${2:delim}, ${3:count})" },
                { "trigger" : "translate", "contents": "translate(${1:string}, ${2:from}, ${3:to})" },
                { "trigger" : "trim", "contents": "trim(${1:string})" },
                { "trigger" : "unbase64", "contents": "unbase(${1:string})" },
                { "trigger" : "upper", "contents": "upper(${1:string})" },
                { "trigger" : "ucase", "contents": "binary(${1:string})" },
                { "trigger" : "initcap", "contents": "initcap(${1:string})" },
                { "trigger" : "levenshtein", "contents": "levenshtein(${1:string}, ${2:string})" },
                { "trigger" : "soundex", "contents": "soundex(${1:string})" },

                { "trigger" : "java_method",      "contents": "java_method(${1:class}, ${2:method})" },
                { "trigger" : "reflect",          "contents": "reflect(${1:class}, ${2:method})" },
                { "trigger" : "hash",             "contents": "hash(${1:args})" },
                { "trigger" : "current_user",     "contents": "current_user()" },
                { "trigger" : "current_database", "contents": "current_database()" },
                { "trigger" : "md5",              "contents": "md5(${1:string_or_binary})" },
                { "trigger" : "sha1",             "contents": "sha1(${1:string_or_binary})" },
                { "trigger" : "sha",              "contents": "sha(${1:string_or_binary})" },
                { "trigger" : "crc32",            "contents": "crc32(${1:string_or_binary})" },
                { "trigger" : "sha2",             "contents": "sha2(${1:string_or_binary}, ${2:int})" },
                { "trigger" : "aes_encrypt",      "contents": "aes_encrypt(${1:string_or_binary}, ${2:key})" },
                { "trigger" : "aes_decrypt",      "contents": "aes_decrypt(${1:string_or_binary}, ${2:key})" },
                { "trigger" : "version", "contents": "version()" },

                { "trigger" : "mask", "contents": "mask(${1:string}, ${2:upper}, ${3:lower}, ${4:number})"},
                { "trigger" : "mask_first_n", "contents": "mask_first_n(${1:string}, ${2:int})"},
                { "trigger" : "mask_last_n", "contents": "mask_last_n(${1:string}, ${2:int})"},
                { "trigger" : "mask_show_first_n", "contents": "mask_show_first_n(${1:string}, ${2:int})"},
                { "trigger" : "mask_show_last_n", "contents": "mask_show_last_n(${1:string}, ${2:int})"},
                { "trigger" : "mask_hash", "contents": "mask_hash(${1:string})"},

                { "trigger" : "xpath", "contents": "xpath(${1:string}, ${2:xpath})" },
                { "trigger" : "xpath_string", "contents": "xpath_string(${1:string}, ${2:xpath})" },
                { "trigger" : "xpath_boolean", "contents": "xpath_boolean(${1:string}, ${2:xpath})" },
                { "trigger" : "xpath_short", "contents": "xpath_short(${1:string}, ${2:xpath})" },
                { "trigger" : "xpath_int", "contents": "xpath_int(${1:string}, ${2:xpath})" },
                { "trigger" : "xpath_long", "contents": "xpath_long(${1:string}, ${2:xpath})" },
                { "trigger" : "xpath_float", "contents": "xpath_float(${1:string}, ${2:xpath})" },
                { "trigger" : "xpath_double", "contents": "xpath_double(${1:string}, ${2:xpath})" },
                { "trigger" : "xpath_number", "contents": "xpath_number(${1:string}, ${2:xpath})" },

                { "trigger" : "count", "contents": "count(${1:expr})"},
                { "trigger" : "sum", "contents": "sum(${1:col})" },
                { "trigger" : "avg", "contents": "avg(${1:col})" },
                { "trigger" : "min", "contents": "min(${1:col})" },
                { "trigger" : "max", "contents": "max(${1:col})" },
                { "trigger" : "variance", "contents": "variance(${1:col})" },
                { "trigger" : "var_pop", "contents": "var_pop(${1:col})" },
                { "trigger" : "var_samp", "contents": "var_samp(${1:col})" },
                { "trigger" : "stddev_pop", "contents": "stddev_pop(${1:col})" },
                { "trigger" : "stddev_samp", "contents": "stddev_samp(${1:col})" },
                { "trigger" : "covar_pop", "contents": "covar_pop(${1:col1}, ${2:col2})" },
                { "trigger" : "covar_samp", "contents": "covar_samp(${1:col1}, ${2:col2})" },
                { "trigger" : "corr", "contents": "corr(${1:col1}, ${2:col2})" },
                { "trigger" : "percentile", "contents": "percentile(${1:col}, ${2:p})" },
                { "trigger" : "percentile_approx", "contents": "percentile_approx(${1:col}, ${2:p} [, ${3:B}])" },
                { "trigger" : "histogram_numeric", "contents": "histogram_numeric(${1:col}, ${2:b})" },
                { "trigger" : "collect_set", "contents": "collect_set(${1:col})" },
                { "trigger" : "collect_list", "contents": "collect_list(${1:col})" },
                { "trigger" : "ntile", "contents": "ntile(${1:int})" },

                { "trigger" : "explode", "contents": "explode(${1:value})" },
                { "trigger" : "inline", "contents": "inine(${1:value})" },
                { "trigger" : "json_tuple", "contents": "json_tuple(${1:json}, ${2:k1}, ${3:k2} ...)" },
                { "trigger" : "parse_url_tuple", "contents": "parse_url_tuple(${1:url}, ${2:p1}, ${3:p2} ...)" },
                { "trigger" : "stack", "contents": "stack(${1:n}, ${2:v1}, .. ${3:vk})" },
                { "trigger" : "posexplode", "contents": "posexplode(${1:array})" },

                "TINYINT ",
                "SMALLINT ",
                "INT ",
                "BIGINT ",
                "FLOAT ",
                "DOUBLE ",
                "DECIMAL ",

                "TIMESTAMP ",
                "DATE ",

                "STRING ",
                "VARCHAR ",
                "CHAR",

                "BOOLEAN ",
                "BINARY ",

                "STRUCT ",
                "MAP ",
                "ARRAY ",
                "UNIONTYPE ",

                "NULL ",
                "TRUE ",
                "FALSE ",

                "BETWEEN ",
                "IS ",
                "AND ",
                "OR ",
                "NOT ",

                "ADD",
                "ALL",
                "ALTER",
                "ANALYZE",
                "ARCHIVE",
                "AS",
                "ASC",
                "AVRO",
                "BUCKET",
                "BUCKETS",
                "BY",
                "CASCADE",
                "CASE",
                "CONCATENATE",
                "CHANGE",
                "CLUSTER",
                "CLUSTERED",
                "COLLECTION",
                "COLUMNS",
                "COMMENT",
                "COMPUTE",
                "CREATE",
                "CREATE_KEY",
                "CREATE_ZONE",
                "CROSS",
                "CRYPTO",
                "CUBE",
                "CURRENT",
                "DATA",
                "DATABASE",
                "DATABASES",
                "DBPROPERTIES",
                "DEFERRED",
                "DELETE_KEY",
                "DELIMITED",
                "DEPENDENCY",
                "DESC",
                "DESCRIBE",
                "DIRECTORY",
                "DISABLE",
                "DISTINCT",
                "DISTRIBUTE",
                "DOT",
                "DROP",
                "ELSE",
                "ENABLE",
                "END",
                "ESCAPED",
                "EXISTS",
                "EXPLAIN",
                "EXPORT",
                "EXTENDED",
                "EXTERNAL",
                "FIELDS",
                "FILEFORMAT",
                "FOLLOWING",
                "FORMAT",
                "FORMATTED",
                "FROM",
                "FULL",
                "FUNCTION",
                "FUNCTIONS",
                "GRANT",
                "GROUP",
                "HAVING",
                "IDXPROPERTIES",
                "IF",
                "IMPORT",
                "IN",
                "INDEX",
                "INPATH",
                "INPUTFORMAT",
                "INSERT",
                "INTO",
                "ITEMS",
                "JAR",
                "JOIN",
                "KEYS",
                "LATERAL",
                "LEFT",
                "LIKE",
                "LIMIT",
                "LINES",
                "LOAD",
                "LOCAL",
                "LOCATION",
                "LOCKS",
                "MAP",
                "MSCK",
                "NOT",
                "NO_DROP",
                "OF",
                "OFFLINE",
                "ON",
                "ORC",
                "ORDER",
                "OUT",
                "OUTER",
                "OUTPUTFORMAT",
                "OVER",
                "OVERWRITE",
                "PARTITION",
                "PARTITIONED",
                "PARTITIONS",
                "PRINCIPALS",
                "PERCENT",
                "PRECEDING",
                "RCFILE",
                "REBUILD",
                "RECORDREADER",
                "RECOVER",
                "REDUCE",
                "RENAME",
                "REPAIR",
                "REPLACE",
                "RESTRICT",
                "REVOKE",
                "RIGHT",
                "ROLE",
                "ROLLUP",
                "ROW",
                "ROWS",
                "SCHEMA",
                "SCHEMAS",
                "SELECT",
                "SEMI",
                "SEQUENCEFILE",
                "SERDE",
                "SERDEPROPERTIES",
                "SET",
                "SHOW",
                "SKEWED",
                "SORT",
                "SORTED",
                "STATISTICS",
                "STORED",
                "TABLE",
                "TABLES",
                "TABLESAMPLE",
                "TBLPROPERTIES",
                "TEMPORARY",
                "TERMINATED",
                "TEXTFILE",
                "THEN",
                "TO",
                "TOUCH",
                "TRANSFORM",
                "TRUNCATE",
                "UNARCHIVE",
                "UNBOUNDED",
                "UNION",
                "USER",
                "USING",
                "VIEW",
                "WHEN",
                "WHERE",
                "WINDOW",
                "WITH"
        ]
}
